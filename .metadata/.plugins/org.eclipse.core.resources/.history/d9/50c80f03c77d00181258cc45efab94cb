package zhumeng.com.uimei.interfaces.kafka;

import java.util.Arrays;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;

/**
 * @Title: KafkaConsumerServer.java
 * @Package zhumeng.com.uimei.interfaces
 * @Description: TODO(用一句话描述该文件做什么)
 * @author z
 * @date 2018年7月2日
 * @version V1.0
 */
public class KafkaConsumerServer {

	public static Properties props = null;
	static{
		 props = new Properties();
		 props.put("bootstrap.servers", "139.159.243.191:9092");
	     props.put("group.id", "test");
	     props.put("enable.auto.commit", "true");
	     props.put("auto.commit.interval.ms", "1000");
	     props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
//	     props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
	     props.put("value.serializer", "zhumeng.com.uimei.interfaces.kafka.serialization.DecodeingKafka");
	}
	
	/**
	 * @Description: 消费消息
	 * @param            
	 * @return       void 
	 * @throws
	 * @author       z
	 * @datetime     2018年7月2日上午11:40:39
	 */
//	public static void consumeMessage(){
//		 KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);
//	     consumer.subscribe(Arrays.asList("foo", "bar","my-topic"));
//	     while (true) {
//	         ConsumerRecords<String, String> records = consumer.poll(100);
//	         for (ConsumerRecord<String, String> record : records)
//	             System.out.printf("offset = %d, key = %s, value = %s%n", record.offset(), record.key(), record.value());
//	     }
//	}
	
	public static void consumeMessage(){
		 KafkaConsumer<String, Object> consumer = new KafkaConsumer<String, Object>(props);
	     //Kafka Consumer subscribes list of topics here.
	      consumer.subscribe(Arrays.asList("visitLogs"));
	      //print the topic name
	      System.out.println("Subscribed to topic visitLogs");

	     while (true) {
	         ConsumerRecords<String, String> records = consumer.poll(100);
	         for (ConsumerRecord<String, String> record : records)
	             System.out.printf("offset = %d, key = %s, value = %s%n", record.offset(), record.key(), record.value());
	     }
	}
	
	public static void main(String[] args){
		consumeMessage();
	}
}
