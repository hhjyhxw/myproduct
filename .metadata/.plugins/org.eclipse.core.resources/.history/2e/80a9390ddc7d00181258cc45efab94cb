package zhumeng.com.uimei.kafka;


import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import org.apache.kafka.clients.producer.Callback;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;

import zhumeng.com.uimei.model.logs.VisitLogs;

/**
 * @Title: KafkaProductServer.java
 * @Package zhumeng.com.uimei
 * @Description: TODO(用一句话描述该文件做什么)
 * @author z
 * @date 2018年7月2日
 * @version V1.0
 */
public class KafkaProductServer implements  Runnable{

	private String topic;
	private Object message;
	
	public KafkaProductServer(String topic,Object message){
		this.topic=topic;
		this.message=message;
	}
	public static Properties props = null;
	static{
		 props = new Properties();
		 props.put("bootstrap.servers", ConfigUtil.get("bootstrap.servers"));
		 //生产者需要leader确认请求完成之前接收的应答数
		 props.put("acks", ConfigUtil.get("acks")!=null?ConfigUtil.get("acks"):"all");
		 props.put("retries", ConfigUtil.get("retries")!=null?Integer.valueOf(ConfigUtil.get("retries")):0);
		 props.put("batch.size", ConfigUtil.get("batch.size")!=null?Integer.valueOf(ConfigUtil.get("batch.size")):16384);
		 props.put("linger.ms", ConfigUtil.get("linger.ms")!=null?Integer.valueOf(ConfigUtil.get("linger.ms")):1);
		 props.put("buffer.memory", ConfigUtil.get("buffer.memory")!=null?Integer.valueOf(ConfigUtil.get("buffer.memory")):33554432);
		 
		   /* 设置序列化的类
	         * 可选：kafka.serializer.StringEncoder
	         * 默认：kafka.serializer.DefaultEncoder
	         */
		
		if(ConfigUtil.get("key.serializer")!=null){
			props.put("value.serializer", ConfigUtil.get("key.serializer"));
		}else{
			 props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
		}
		 if(ConfigUtil.get("producer.value.serializer")!=null){
			 props.put("value.serializer",ConfigUtil.get("producer.value.serializer"));
		 }else{
			 props.put("value.serializer", "zhumeng.com.uimei.interfaces.kafka.serialization.EncodeingKafka");
		 }
		
	}
	
	/**
	 * @Description: 创建消息
	 * @param            
	 * @return       void 
	 * @throws
	 * @author       z
	 * @datetime     2018年7月2日上午11:40:39
	 */
	public static void createMessage(){
//		List<VisitLogs> asList = new ArrayList<VisitLogs>();
		 Producer<String, Object> producer = new KafkaProducer<String, Object>(props);
		 VisitLogs vl = null;
		for(int i = 0; i < 20; i++){
			 vl = new VisitLogs();
			 vl.setMethedName("methed"+"_"+i);
			 vl.setVisitDatetime(new Date().toString());
//			 asList.add(vl);
			 List<VisitLogs> asList = Arrays.asList(vl,vl);
//	    	  producer.send(new ProducerRecord<String, Object>("visitLogs",Integer.toString(i),asList));

			 
			 producer.send(new ProducerRecord<String, Object>("visitLogs", Integer.toString(i), asList), new Callback() {
					
					@Override
					public void onCompletion(RecordMetadata metadata, Exception exception) {
						if (metadata != null) {
							System.out.println("  发送成功："+"checksum: "+metadata.checksum()+" offset: "+metadata.offset()+" partition: "+metadata.partition()+" topic: "+metadata.topic());
						}
						if (exception != null) {
							System.out.println("异常："+exception.getMessage());
						}
					}
				});

		}
		producer.close();
	}
	
	
	public static void main(String[] args){
		createMessage();
	}


	@Override
	public void run() {
		 Producer<String, Object> producer = new KafkaProducer<String, Object>(props);
		
	}
}
