package zhumeng.com.uimei.kafka;

import java.util.Arrays;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;

/**
 * @Title: KafkaConsumerServer.java
 * @Package zhumeng.com.uimei
 * @Description: TODO(用一句话描述该文件做什么)
 * @author z
 * @date 2018年7月2日
 * @version V1.0
 */
public class KafkaConsumerServer implements  Runnable{

	public static Properties props = null;
	static{
		 props = new Properties();
		 /* 定义kakfa 服务的地址，不需要将所有broker指定上 */
		 props.put("bootstrap.servers", "139.159.243.191:9092");
		 /* 制定consumer group */
	     props.put("group.id", "test-consumer-group");
	     /* 是否自动确认offset */
	     props.put("enable.auto.commit", "false");
	     /* 自动确认offset的时间间隔 */
	     props.put("auto.commit.interval.ms", "1000");
	     /* key的序列化类 */
	     props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
//	     props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
	     /* value的序列化类 */
	     props.put("value.deserializer", "zhumeng.com.uimei.interfaces.kafka.serialization.DecodeingKafka");
	}
	
	/**
	 * @Description: 消费消息
	 * @param            
	 * @return       void 
	 * @throws
	 * @author       z
	 * @datetime     2018年7月2日上午11:40:39
	 */
//	public static void consumeMessage(){
//		 KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);
//	     consumer.subscribe(Arrays.asList("foo", "bar","my-topic"));
//	     while (true) {
//	         ConsumerRecords<String, String> records = consumer.poll(100);
//	         for (ConsumerRecord<String, String> record : records)
//	             System.out.printf("offset = %d, key = %s, value = %s%n", record.offset(), record.key(), record.value());
//	     }
//	}
	
	public static void consumeMessage(){
		 KafkaConsumer<String, Object> consumer = new KafkaConsumer<String, Object>(props);
	     //Kafka Consumer subscribes list of topics here.
	      consumer.subscribe(Arrays.asList("visitLogs"));
	      //print the topic name
	      System.out.println("Subscribed to topic visitLogs");

//	     while (true) {
	         ConsumerRecords<String, Object> records = consumer.poll(10000);
	         for (ConsumerRecord<String, Object> record : records){
	        	 if(record!=null && record.value()!=null){
	        		 System.out.println( record.value());
	        	 }
//	        	 System.out.println(record.toString());
	         }
	        	
	         consumer.commitSync();
	         /* 同步确认某个分区的特定offset */
//	            long lastOffset = partitionRecords.get(partitionRecords.size() - 1).offset();
//	            consumer.commitSync(Collections.singletonMap(partition, new OffsetAndMetadata(lastOffset + 1)));

//	     }
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}
	
	private   KafkaConsumer<String, Object> createProducer(){
		return new KafkaProducer<String, Object>(props);
	}
}
