package zhumeng.com.uimei.kafka;

import java.util.Arrays;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;

/**
 * @Title: KafkaConsumerServer.java
 * @Package zhumeng.com.uimei
 * @Description: TODO(用一句话描述该文件做什么)
 * @author z
 * @date 2018年7月2日
 * @version V1.0
 */
public class KafkaConsumerServer implements  Runnable{

	private String topic;
	public KafkaConsumerServer(){}
	public KafkaConsumerServer( String topic){
		this.topic=topic;
	}
	public static Properties props = null;
	static{
		 props = new Properties();
		 /* 定义kakfa 服务的地址，不需要将所有broker指定上 */
		 props.put("bootstrap.servers", "139.159.243.191:9092");
		 /* 制定consumer group */
	     props.put("group.id", "test-consumer-group");
	     /* 是否自动确认offset */
	     props.put("enable.auto.commit", "false");
	     /* 自动确认offset的时间间隔 */
	     props.put("auto.commit.interval.ms", "1000");
	     /* key的序列化类 */
	     props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
//	     props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
	     /* value的序列化类 */
	     props.put("value.deserializer", "zhumeng.com.uimei.interfaces.kafka.serialization.DecodeingKafka");
	}
	
	@Override
	public void run() {
		KafkaConsumer<String, Object> consumer = createKafkaConsumer();
	    consumer.subscribe(Arrays.asList(topic));
	    ConsumerRecords<String, Object> records = consumer.poll(10000);
        for (ConsumerRecord<String, Object> record : records){
        	if(record!=null && record.value()!=null){
        		System.out.println( record.value());
        	}
        }
        consumer.commitSync();
	}
	
	private   KafkaConsumer<String, Object> createKafkaConsumer(){
		return new KafkaConsumer<String, Object>(props);
	}
}
