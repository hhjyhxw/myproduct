package zhumeng.com.uimei.interfaces.kafka;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;

import zhumeng.com.uimei.model.logs.VisitLogs;

/**
 * @Title: KafkaProductServer.java
 * @Package zhumeng.com.uimei.interfaces
 * @Description: TODO(用一句话描述该文件做什么)
 * @author z
 * @date 2018年7月2日
 * @version V1.0
 */
public class KafkaProductServer {

	public static Properties props = null;
	static{
		 props = new Properties();
		 props.put("bootstrap.servers", "139.159.243.191:9092");
		 props.put("acks", "all");
		 props.put("retries", 0);
		 props.put("batch.size", 16384);
		 props.put("linger.ms", 1);
		 props.put("buffer.memory", 33554432);
		 props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
//		 props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");
		 props.put("value.serializer", "zhumeng.com.uimei.interfaces.kafka.serialization.EncodeingKafka");
	}
	
	/**
	 * @Description: 创建消息
	 * @param            
	 * @return       void 
	 * @throws
	 * @author       z
	 * @datetime     2018年7月2日上午11:40:39
	 */
	public static void createMessage(){
		List<VisitLogs> asList = new ArrayList<VisitLogs>();
		 Producer<String, Object> producer = new KafkaProducer<String, Object>(props);
		 VisitLogs vl = null;
		 int j =0;
		for(int i = 0; i < 5; i++)
			 vl = new VisitLogs();
			 vl.setMethedName("methed"+"_"+J++);
			 vl.setVisitDatetime(new Date().toString());
			 asList.add(vl);
			 
			 producer.send(new ProducerRecord<String, Object>(topicName, Integer.toString(i), asList), new Callback() {
					
					@Override
					public void onCompletion(RecordMetadata metadata, Exception exception) {
						if (metadata != null) {
							System.out.println(index+"  发送成功："+"checksum: "+metadata.checksum()+" offset: "+metadata.offset()+" partition: "+metadata.partition()+" topic: "+metadata.topic());
						}
						if (exception != null) {
							System.out.println(index+"异常："+exception.getMessage());
						}
					}
				});

		}
	}
	
	
	public static void main(String[] args){
		createMessage();
	}
}
