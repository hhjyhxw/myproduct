package zhumeng.com.uimei.config.datasource;

import java.sql.SQLException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import zhumeng.com.uimei.config.datasource.shares.ModuloDatabaseShardingAlgorithm;
import zhumeng.com.uimei.config.datasource.shares.ModuloTableShardingAlgorithm;

import com.alibaba.druid.pool.DruidDataSource;
import com.dangdang.ddframe.rdb.sharding.api.ShardingDataSourceFactory;
import com.dangdang.ddframe.rdb.sharding.api.rule.DataSourceRule;
import com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule;
import com.dangdang.ddframe.rdb.sharding.api.rule.TableRule;
import com.dangdang.ddframe.rdb.sharding.api.strategy.database.DatabaseShardingStrategy;
import com.dangdang.ddframe.rdb.sharding.api.strategy.table.TableShardingStrategy;
import com.mysql.cj.jdbc.Driver;

/**
 * @Title: DataSourceConfig.java
 * @Package zhumeng.com.uimei.config.datasource
 * @Description: TODO(用一句话描述该文件做什么)
 * @author z
 * @date 2018年7月4日
 * @version V1.0
 */
@Configuration
public class DataSourceConfig {

	 /**
     * 配置数据源0，数据源的名称最好要有一定的规则，方便配置分库的计算规则
     * @return
     */
    @Bean(name="dataSource0")
    @ConfigurationProperties(prefix = "spring.datasource.db1")
    public DataSource dataSource0(){
        return DataSourceBuilder.create().build();
    }
    /**
     * 配置数据源1，数据源的名称最好要有一定的规则，方便配置分库的计算规则
     * @return
     */
    @Bean(name="dataSource1")
    @ConfigurationProperties(prefix = "spring.datasource.db2")
    public DataSource dataSource1(){
        return DataSourceBuilder.create().build();
    }
    
	   @Bean
	    public DataSource getDataSource(@Qualifier("dataSource0") DataSource dataSource0,
                @Qualifier("dataSource1") DataSource dataSource1) throws SQLException {
	        return buildDataSource(dataSource0,dataSource1);
	    }

	    private DataSource buildDataSource(@Qualifier("dataSource0") DataSource dataSource0,
                @Qualifier("dataSource1") DataSource dataSource1) throws SQLException {
	        //设置分库映射
	        Map<String, DataSource> dataSourceMap = new HashMap<>(2);
	        //添加两个数据库ds_0,ds_1到map里
	        dataSourceMap.put("dataSource0",dataSource0);
	        dataSourceMap.put("dataSource1",dataSource1);
	        //设置默认db为ds_0，也就是为那些没有配置分库分表策略的指定的默认库
	        //如果只有一个库，也就是不需要分库的话，map里只放一个映射就行了，只有一个库时不需要指定默认库，但2个及以上时必须指定默认库，否则那些没有配置策略的表将无法操作数据
	        DataSourceRule dataSourceRule = new DataSourceRule(dataSourceMap, "dataSource0");

	        //设置分表映射，将t_order_0和t_order_1两个实际的表映射到t_order逻辑表
	        //0和1两个表是真实的表，t_order是个虚拟不存在的表，只是供使用。如查询所有数据就是select * from t_order就能查完0和1表的
	        TableRule visitlogsTableRule = TableRule.builder("t_visit_logs")
	                .actualTables(Arrays.asList("t_visit_logs_0", "t_visit_logs_1"))
	                .dataSourceRule(dataSourceRule)
	                .build();

	        //具体分库分表策略，按什么规则来分
	        ShardingRule shardingRule = ShardingRule.builder()
	                .dataSourceRule(dataSourceRule)
	                .tableRules(Arrays.asList(visitlogsTableRule))
	                .databaseShardingStrategy(new DatabaseShardingStrategy("id", new ModuloDatabaseShardingAlgorithm()))
	                .tableShardingStrategy(new TableShardingStrategy("id", new ModuloTableShardingAlgorithm())).build();

	        DataSource dataSource = ShardingDataSourceFactory.createDataSource(shardingRule);

	        return dataSource;
	    }

	   
//	    private static DataSource createDataSource(final String dataSourceName) {
//	        //使用druid连接数据库
//	        DruidDataSource result = new DruidDataSource();
//	        result.setDriverClassName(Driver.class.getName());
//	        result.setUrl(String.format("jdbc:mysql://localhost:3306/%s", dataSourceName));
//	        result.setUsername("root");
//	        result.setPassword("");
//	        return result;
//	    }
}
